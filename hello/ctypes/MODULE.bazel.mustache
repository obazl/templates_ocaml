module(
    name                = "{{name}}",
    version             = "0.1.0",
    bazel_compatibility = [">=8.0.0"],
    compatibility_level = 0,
)

## bcr:
bazel_dep(name = "platforms",    version = "0.0.11")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cc",     version = "0.1.1")

## obazl:
bazel_dep(name = "rules_ocaml", version = "3.0.0.beta.1")
bazel_dep(name = "tools_opam",  version = "1.0.0.beta.1")
opam = use_extension("@tools_opam//extensions:opam.bzl", "opam")
opam.deps(
    # toolchain = , # default: "xdg"
    # ocaml_version = , # default "5.3.0"
    # opam_version = "2.3.0",   # default: "2.3.0"
    # debug = 2,
    # verbosity = 1,
    # opam_verbosity = 0,
    pkgs = {
        "integers": "",
    },
)
use_repo(opam, "opam.ocamlsdk")
register_toolchains(
    "@opam.ocamlsdk//toolchain/selectors/local:all",
    "@opam.ocamlsdk//toolchain/profiles:all",
)

use_repo(opam, "opam.integers")

bazel_dep(name = "rules_ctypes", version = "0.23.0.beta.1")
use_repo(opam, "opam.ctypes", "opam.ctypes-foreign")

# dev mode opt-ins:
opam_dev = use_extension(
    "@tools_opam//extensions:opam.bzl",
    "opam",
    dev_dependency = True,
)
opam_dev.deps(pkgs = {"ounit2": "2.2.7"})  # configure
use_repo(opam_dev, "opam.ounit2")  # import

# enable 'bazel run @opam'
opam_dev.opam()
use_repo(opam_dev, "opam")

# enable 'bazel run @ocaml'
opam_dev.ocaml()
use_repo(opam_dev, "ocaml")

# enable 'bazel run @utop'
opam_dev.utop(
    # ocamlinit is optional:
    ocamlinit = ".config/ocamlinit",
    version = "2.15.0-1",
)
use_repo(opam_dev, utop = "opam.utop")

# enable 'bazel run @dbg --@dbg//pgm=//bin:greetings'
opam_dev.dbg()
use_repo(opam_dev, "dbg")
